"+---------+
"+ plugins +
"+---------+

" Automatic installation
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Run PlugInstall if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \| PlugInstall --sync | source $MYVIMRC
\| endif

" Plugins will be downloaded under the specified directory.
call plug#begin(has('nvim') ? stdpath('data') . '/plugged' : '~/.vim/plugged')

" Declare the list of plugins.


" coc {{{
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
    let g:coc_global_extensions = ['coc-json', 'coc-yaml', 'coc-git', 'coc-markdownlint', 'coc-pyright', 'coc-pairs', 'coc-lists']

    " Use tab for trigger completion with characters ahead and navigate.
    " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
    " other plugin before putting this into your config.
    inoremap <silent><expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ coc#refresh()
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

    function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
    endfunction

    " Use <c-space> to trigger completion.
    if has('nvim')
    inoremap <silent><expr> <c-space> coc#refresh()
    else
    inoremap <silent><expr> <c-@> coc#refresh()
    endif

    " Make <CR> auto-select the first completion item and notify coc.nvim to
    " format on enter, <cr> could be remapped by other vim plugin
    inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                                \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

    " Use `[g` and `]g` to navigate diagnostics
    " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
    nmap <silent> [g <Plug>(coc-diagnostic-prev)
    nmap <silent> ]g <Plug>(coc-diagnostic-next)

    " GoTo code navigation.
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)

    " Use K to show documentation in preview window.
    nnoremap <silent> K :call <SID>show_documentation()<CR>

    function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
    elseif (coc#rpc#ready())
        call CocActionAsync('doHover')
    else
        execute '!' . &keywordprg . " " . expand('<cword>')
    endif
    endfunction

    " Highlight the symbol and its references when holding the cursor.
    autocmd CursorHold * silent call CocActionAsync('highlight')

    " Symbol renaming.
    nmap <leader>rn <Plug>(coc-rename)

    " Add `:Fold` command to fold current buffer.
    command! -nargs=? Fold :call     CocAction('fold', <f-args>)

    " Add `:OR` command for organize imports of the current buffer.
    command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')
    
    " coc-list {{{
        " Mappings for CoCList
        " Show all diagnostics.
        nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
        " Manage extensions.
        nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
        " Show commands.
        nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
        " Find symbol of current document.
        nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
        " Search workspace symbols.
        nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
        " Do default action for next item.
        nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
        " Do default action for previous item.
        nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
        " Resume latest coc list.
        nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
    " }}}

    " coc-git {{{
        " statusline
        set statusline^=%{get(g:,'coc_git_status','')}%{get(b:,'coc_git_status','')}%{get(b:,'coc_git_blame','')}
        " update statusline
        autocmd User CocGitStatusChange {command}
        " key map
        " navigate chunks of current buffer
        nmap [g <Plug>(coc-git-prevchunk)
        nmap ]g <Plug>(coc-git-nextchunk)
        " navigate conflicts of current buffer
        nmap [c <Plug>(coc-git-prevconflict)
        nmap ]c <Plug>(coc-git-nextconflict)
        " show chunk diff at current position
        nmap gs <Plug>(coc-git-chunkinfo)
        " show commit contains current position
        nmap gc <Plug>(coc-git-commit)
        " create text object for git chunks
        omap ig <Plug>(coc-git-chunk-inner)
        xmap ig <Plug>(coc-git-chunk-inner)
        omap ag <Plug>(coc-git-chunk-outer)
        xmap ag <Plug>(coc-git-chunk-outer)
    " }}}
" }}}


" 窗口控制 {{{
    Plug 'christoomey/vim-tmux-navigator'
" }}}

" nerdtree {{{
    Plug 'preservim/nerdtree'
    " NERDTree settings            
                                
    " open a NERDTree automatically when vim starts up if no files were specified    
    autocmd StdinReadPre * let s:std_in=1    
    autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif    
                                
    " open NERDTree automatically when vim starts up on opening a directory    
    autocmd StdinReadPre * let s:std_in=1    
    autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif
    
    " show bookmarks
    let NERDTreeShowBookmarks=1

    " map a specific key or shortcut to open NERDTree
    map <C-n> :NERDTreeToggle<CR>

    " close vim if the only window left open is a NERDTree
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

    " Let NERDTree igonre files
    let NERDTreeIgnore = ['\.pyc$', '\.swp$']
" }}}
  

" status line {{{
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
    let g:airline_theme='gruvbox'
    " enable tabline
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#buffer_nr_show = 0 
    let g:airline#extensions#tabline#show_tab_nr = 1
    " index mode
    let g:airline#extensions#tabline#buffer_idx_mode = 1
    " tabs map
    nmap <leader>1 <Plug>AirlineSelectTab1
    nmap <leader>2 <Plug>AirlineSelectTab2
    nmap <leader>3 <Plug>AirlineSelectTab3
    nmap <leader>4 <Plug>AirlineSelectTab4
    nmap <leader>5 <Plug>AirlineSelectTab5
    nmap <leader>6 <Plug>AirlineSelectTab6
    nmap <leader>7 <Plug>AirlineSelectTab7
    nmap <leader>8 <Plug>AirlineSelectTab8
    nmap <leader>9 <Plug>AirlineSelectTab9
    nmap <leader>0 <Plug>AirlineSelectTab0
    nmap <leader>- <Plug>AirlineSelectPrevTab
    nmap <leader>+ <Plug>AirlineSelectNextTab

    " minimum of tabs needed to display the tabline
    let g:airline#extensions#tabline#tab_min_count = 0 
    " show git branch info
    let g:airline#extensions#branch#enabled=1
" }}}

" gruvbox colorscheme {{{
    Plug 'morhetz/gruvbox'
" }}}

" show indentline {{{
    Plug 'Yggdroot/indentLine'
    let g:indent_guides_guide_size = 1  " 指定对齐线的尺寸
    let g:indent_guides_start_level = 2  " 从第二层开始可视化显示缩进
" }}}

" Quick comment {{{
    Plug 'preservim/nerdcommenter'
    "add spaces after comment delimiters by default
    let g:NERDSpaceDelims = 1
    au FileType python let g:NERDSpaceDelims = 0

    " Use compact syntax for prettified multi-line comments
    let g:NERDCompactSexyComs = 1

    " Align line-wise comment delimiters flush left instead of following code indentation
    let g:NERDDefaultAlign = 'left'

    " Allow commenting and inverting empty lines (useful when commenting a region)
    let g:NERDCommentEmptyLines = 1

    " Enable trimming of trailing whitespace when uncommenting
    let g:NERDTrimTrailingWhitespace = 1

    " Enable NERDCommenterToggle to check all selected lines is commented or not
    let g:NERDToggleCheckAllLines = 1
" }}}


" markdown {{{
    Plug 'tpope/vim-markdown', { 'for': 'markdown' }
" }}}


" rainbow {{{
    Plug 'luochen1990/rainbow'
    let g:rainbow_active = 1
" }}}

" python {{{
    " Figure out the system Python for Neovim
    if exists("$VIRTUAL_ENV")
        let g:python3_host_prog=substitute(system("which -a python3 | head -n3 | tail -n1"), "\n", '', 'g')
    else
        let g:python3_host_prog=substitute(system("which -a python3 | head -n2 | tail -n1"), "\n", '', 'g')
    endif

    " syntax check {{{
        Plug 'nvie/vim-flake8' " map F7
        autocmd BufWritePost *.py call flake8#Flake8() " check when open a python file
    " }}}
    " formatter {{{
        Plug 'Chiel92/vim-autoformat'
        noremap <F5> :Autoformat<CR>    " map F5
    " }}}
" }}}

" version control {{{
    " vim-fugitive {{{
        Plug 'tpope/vim-fugitive'
    " }}}

    " git blamer {{{
        Plug 'APZelos/blamer.nvim'
        let g:blamer_enabled = 1
    " }}}

" }}}

" List ends here. Plugins become visible to Vim after this call.

call plug#end()


"+---------+
"+  basic  +
"+---------+

set nocompatible
set autoread    " detect when a file is changed
set number  " Set the line number
set autoindent  " automatically set indent of new line
set smartindent
set hlsearch
set encoding=UTF-8
set updatetime=300
set ignorecase  " no case sensitive

set clipboard=unnamed
set history=1000
set textwidth=120

" backup settings
set nobackup
set nowb
set noswapfile

" Tab settings
set ts=4
set softtabstop=4
set shiftwidth=4
set expandtab   " Always use spaces instead of tabs

if has('mouse')
    set mouse=a
endif

syntax on  " Syntax highlighting
filetype plugin indent on

" enable 24 bit color support if supported
if (has("termguicolors"))
    if (!(has("nvim")))
        let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
        let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    endif
    set termguicolors
endif

" colorscheme
colorscheme gruvbox
